{"version":3,"sources":["constants.js","components/GetCustomToken.js","components/GetToken.js","App.js","serviceWorker.js","index.js"],"names":["allocateTo","mint2","abis","tokens","DAI","address","abi","defaultAmount","BAT","networks","name","supportedNetworks","Object","keys","map","Number","GetCustomToken","context","useWeb3Context","account","library","useState","customAddress","setCustomAddress","mining","setMining","supportMethod","contract","params","a","estimate","console","log","getCustomToken","mint1","qtyWei","BN","pow","mul","toString","Promise","all","o","contractTx","ethers","Contract","getSigner","supported","methodTx","contractSupported","find","tx","wait","error","type","placeholder","onChange","e","target","value","disabled","onClick","GetToken","networkId","token","setToken","amount","setAmount","setContract","useEffect","getToken","method","includes","mint","networkName","toUpperCase","href","toLowerCase","App","setFirstValidConnector","code","className","Boolean","window","location","hostname","match","connectors","MetaMask","InjectedConnector","Connectors","ReactDOM","render","libraryName","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef09c605.chunk.js","sourcesContent":["const allocateTo = [\"function allocateTo(address to, uint amount)\"];\nconst mint1 = [\"function mint(uint amount)\"];\nconst mint2 = [\"function mint(address to, uint amount)\"];\nexport const abis = { allocateTo, mint1, mint2 };\n\nexport const tokens = {\n  DAI: {\n    \"4\": {\n      address: \"0x5592ec0cfb4dbc12d3ab100b257153436a1f0fea\",\n      abi: allocateTo,\n      defaultAmount: 100\n    },\n    \"42\": {\n      address: \"0x29200B8486Ec4f3A13E11f03FB0017C15a99C435\",\n      abi: mint2,\n      defaultAmount: 5\n    }\n  },\n  BAT: {\n    \"4\": {\n      address: \"0xbF7A7169562078c96f0eC1A8aFD6aE50f12e5A99\",\n      abi: allocateTo,\n      defaultAmount: 100\n    },\n    \"42\": {\n      address: \"0x9dDB308C14f700d397bB26F584Ac2E303cdc7365\",\n      abi: allocateTo,\n      defaultAmount: 100\n    }\n  }\n};\n\nexport const networks = {\n  \"4\": {\n    name: \"Rinkeby\"\n  },\n  \"42\": {\n    name: \"Kovan\"\n  }\n};\n\nexport const supportedNetworks = Object.keys(networks).map(Number);\n","import React, { useState } from \"react\";\nimport { useWeb3Context } from \"web3-react\";\nimport BN from \"big.js\";\nimport { ethers } from \"ethers\";\nimport { abis } from \"./../constants\";\n\nfunction GetCustomToken() {\n  const context = useWeb3Context();\n  const { account, library } = context;\n\n  const [customAddress, setCustomAddress] = useState(\"\");\n  const [mining, setMining] = useState(false);\n\n  async function supportMethod(contract, name, params) {\n    try {\n      await contract.estimate[name](...params);\n\n      return true;\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  }\n\n  const getCustomToken = async () => {\n    const { mint1, mint2, allocateTo } = abis;\n    const qtyWei = new BN(10)\n      .pow(18)\n      .mul(100)\n      .toString();\n\n    const contractSupported = (\n      await Promise.all(\n        [\n          { abi: mint1, params: [qtyWei], name: \"mint\" },\n          { abi: mint2, params: [account, qtyWei], name: \"mint\" },\n          { abi: allocateTo, params: [account, qtyWei], name: \"allocateTo\" }\n        ].map(async o => {\n          const contractTx = new ethers.Contract(\n            customAddress,\n            o.abi,\n            library.getSigner()\n          );\n\n          const supported = await supportMethod(contractTx, o.name, o.params);\n          console.log(`${o.name} supported? ${supported}`);\n          return { methodTx: contractTx[o.name], supported, params: o.params };\n        })\n      )\n    ).find(o => o.supported);\n\n    if (contractSupported) {\n      const tx = await contractSupported.methodTx(...contractSupported.params);\n      setMining(true);\n      await tx.wait();\n      setMining(false);\n    } else {\n      console.error(\"Unsupported token\");\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Use custom address\"\n        onChange={e => setCustomAddress(e.target.value)}\n        disabled={mining}\n        value={customAddress}\n      ></input>\n      <button onClick={getCustomToken} disabled={mining}>\n        Get 100 custom token\n      </button>\n    </div>\n  );\n}\n\nexport default GetCustomToken;\n","import React, { useEffect, useState } from \"react\";\nimport { useWeb3Context } from \"web3-react\";\nimport BN from \"big.js\";\nimport { ethers } from \"ethers\";\nimport { tokens, networks } from \"./../constants\";\n\nfunction GetToken() {\n  const context = useWeb3Context();\n  const { account, networkId, library } = context;\n\n  const [token, setToken] = useState(\"DAI\");\n  const [amount, setAmount] = useState(0);\n  const [mining, setMining] = useState(false);\n  const [contract, setContract] = useState(null);\n\n  useEffect(() => {\n    if (account && library) {\n      const { address, abi } = tokens[token][networkId];\n      setContract(new ethers.Contract(address, abi, library.getSigner()));\n    }\n  }, [account, library, networkId, token]);\n\n  useEffect(() => {\n    if (networkId) {\n      setAmount(tokens[token][networkId].defaultAmount);\n    }\n  }, [networkId, token]);\n\n  const getToken = async () => {\n    const qtyWei = new BN(10).pow(18).mul(amount);\n    const method = tokens[token][networkId].abi[0].includes(\"mint\")\n      ? contract.mint\n      : contract.allocateTo;\n    const tx = await method(account, qtyWei.toString());\n    setMining(true);\n    await tx.wait();\n    setMining(false);\n  };\n\n  const networkName = networks[networkId].name;\n\n  return (\n    <div>\n      <div>\n        <select\n          onChange={e => {\n            setToken(e.target.value);\n          }}\n          value={token}\n        >\n          <option value=\"DAI\">DAI</option>\n          <option value=\"BAT\">BAT</option>\n        </select>\n      </div>\n\n      <button onClick={getToken} disabled={!amount || mining}>\n        {`GET ${amount} ${token.toUpperCase()}`}\n      </button>\n\n      <div>\n        <a\n          target=\"_blank\"\n          href={`https://${networkName.toLowerCase()}.etherscan.io/address/${\n            tokens[token][networkId].address\n          }`}\n        >\n          {tokens[token][networkId].address}\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default GetToken;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { useWeb3Context } from \"web3-react\";\nimport { networks } from \"./constants\";\nimport GetCustomToken from \"./components/GetCustomToken\";\nimport GetToken from \"./components/GetToken\";\n\nfunction App() {\n  const context = useWeb3Context();\n  const { account, networkId, setFirstValidConnector, error } = context;\n\n  useEffect(() => {\n    setFirstValidConnector([\"MetaMask\"]);\n  }, []);\n\n  if (\n    error &&\n    (error.code === \"UNSUPPORTED_NETWORK\" ||\n      error.code === \"ALL_CONNECTORS_INVALID\")\n  ) {\n    return <div className=\"App\">Connect MetaMask to Rinkeby</div>;\n  }\n\n  if (!networkId) {\n    return null;\n  }\n\n  const networkName = networks[networkId].name;\n  return (\n    <>\n      <div className=\"App\">\n        <p>Account: {account || \"None\"}</p>\n        <p>Network: {networkName} </p>\n        <GetToken />\n        <GetCustomToken />\n      </div>\n      <footer>\n        <a href=\"https://github.com/protofire/tokens-faucet\">Source</a>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Web3Provider from \"web3-react\";\nimport { supportedNetworks } from \"./constants\";\nimport { Connectors } from \"web3-react\";\nconst { InjectedConnector } = Connectors;\nconst MetaMask = new InjectedConnector({ supportedNetworks });\nconst connectors = { MetaMask };\n\nReactDOM.render(\n  <Web3Provider libraryName=\"ethers.js\" connectors={connectors}>\n    <App />\n  </Web3Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}