{"version":3,"sources":["networks.js","App.js","serviceWorker.js","index.js"],"names":["networks","DAI","address","abi","BAT","App","context","useWeb3Context","connectorName","account","networkId","library","setFirstValidConnector","error","contract","useState","token","setToken","useEffect","ethers","Contract","getSigner","code","className","getToken","a","amount","BN","pow","method","includes","mint","allocateTo","toString","onChange","e","target","value","onClick","toUpperCase","Boolean","window","location","hostname","match","connectors","MetaMask","InjectedConnector","Connectors","supportedNetworks","ReactDOM","render","libraryName","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ybAAaA,EAAW,CACtBC,IAAK,CACH,EAAK,CACHC,QAAS,6CACTC,IAAK,CAAC,iDAER,GAAM,CACJD,QAAS,6CACTC,IAAK,CAAC,kDAGVC,IAAK,CACH,EAAK,CACHF,QAAS,6CACTC,IAAK,CAAC,iDAER,GAAM,CACJD,QAAS,6CACTC,IAAK,CAAC,mDCmDGE,MA9Df,WACE,IAAMC,EAAUC,2BAEdC,EAMEF,EANFE,cACAC,EAKEH,EALFG,QACAC,EAIEJ,EAJFI,UACAC,EAGEL,EAHFK,QACAC,EAEEN,EAFFM,uBACAC,EACEP,EADFO,MAGEC,EAAW,KAXF,EAaaC,mBAAS,OAbtB,mBAaNC,EAbM,KAaCC,EAbD,KA0Bb,GAXAC,qBAAU,WACRN,EAAuB,CAAC,eACvB,IAEHM,qBAAU,WACR,GAAIT,GAAWE,EAAS,CAAC,IAAD,EACGX,EAASgB,GAAON,GAAjCR,EADc,EACdA,QAASC,EADK,EACLA,IACjBW,EAAW,IAAIK,SAAOC,SAASlB,EAASC,EAAKQ,EAAQU,gBAEtD,CAACZ,EAASE,EAASD,EAAWM,IAG/BH,IACgB,wBAAfA,EAAMS,MACU,2BAAfT,EAAMS,MAER,OAAO,yBAAKC,UAAU,OAAf,+BAGT,IAAMC,EAAQ,uCAAG,8BAAAC,EAAA,6DACTC,EAAS,IAAIC,IAAG,IAAIC,IAAI,IACxBC,EAAS7B,EAASgB,GAAON,GAAWP,IAAI,GAAG2B,SAAS,QACtDhB,EAASiB,KACTjB,EAASkB,WAJE,SAKTH,EAAOpB,EAASiB,EAAOO,YALd,2CAAH,qDAQd,OACE,yBAAKV,UAAU,OACb,gDAAsBf,GACtB,uCAAaC,GAAW,QACxB,0CAAgBC,GAChB,4BACEwB,SAAU,SAAAC,GACRlB,EAASkB,EAAEC,OAAOC,QAEpBA,MAAOrB,GAEP,4BAAQqB,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,QAGF,4BAAQC,QAASd,GAAjB,kBAAoCR,EAAMuB,eAA1C,OCpDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICTAC,EAAa,CAAEC,SADJ,IAAIC,EADSC,aAAtBD,mBAC+B,CAAEE,kBAAmB,CAAC,EAAG,OAGhEC,IAASC,OACP,kBAAC,IAAD,CAAcC,YAAY,YAAYP,WAAYA,GAChD,kBAAC,EAAD,OAEFQ,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.294106e2.chunk.js","sourcesContent":["export const networks = {\n  DAI: {\n    \"4\": {\n      address: \"0x5592ec0cfb4dbc12d3ab100b257153436a1f0fea\",\n      abi: [\"function allocateTo(address to, uint amount)\"]\n    },\n    \"42\": {\n      address: \"0xbF7A7169562078c96f0eC1A8aFD6aE50f12e5A99\",\n      abi: [\"function allocateTo(address to, uint amount)\"]\n    }\n  },\n  BAT: {\n    \"4\": {\n      address: \"0xbF7A7169562078c96f0eC1A8aFD6aE50f12e5A99\",\n      abi: [\"function allocateTo(address to, uint amount)\"]\n    },\n    \"42\": {\n      address: \"0x9dDB308C14f700d397bB26F584Ac2E303cdc7365\",\n      abi: [\"function allocateTo(address to, uint amount)\"]\n    }\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { useWeb3Context } from \"web3-react\";\nimport BN from \"big.js\";\nimport { ethers } from \"ethers\";\nimport { networks } from \"./networks\";\n\nfunction App() {\n  const context = useWeb3Context();\n  const {\n    connectorName,\n    account,\n    networkId,\n    library,\n    setFirstValidConnector,\n    error\n  } = context;\n\n  let contract = null;\n\n  const [token, setToken] = useState(\"DAI\");\n\n  useEffect(() => {\n    setFirstValidConnector([\"MetaMask\"]);\n  }, []);\n\n  useEffect(() => {\n    if (account && library) {\n      const { address, abi } = networks[token][networkId];\n      contract = new ethers.Contract(address, abi, library.getSigner());\n    }\n  }, [account, library, networkId, token]);\n\n  if (\n    error &&\n    (error.code === \"UNSUPPORTED_NETWORK\" ||\n      error.code === \"ALL_CONNECTORS_INVALID\")\n  ) {\n    return <div className=\"App\">Connect MetaMask to Rinkeby</div>;\n  }\n\n  const getToken = async () => {\n    const amount = new BN(10).pow(18);\n    const method = networks[token][networkId].abi[0].includes(\"mint\")\n      ? contract.mint\n      : contract.allocateTo;\n    await method(account, amount.toString());\n  };\n\n  return (\n    <div className=\"App\">\n      <p>Active Connector: {connectorName}</p>\n      <p>Account: {account || \"None\"}</p>\n      <p>Network ID: {networkId}</p>\n      <select\n        onChange={e => {\n          setToken(e.target.value);\n        }}\n        value={token}\n      >\n        <option value=\"DAI\">DAI</option>\n        <option value=\"BAT\">BAT</option>\n      </select>\n\n      <button onClick={getToken}> {`GET ${token.toUpperCase()}`} </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Web3Provider from \"web3-react\";\nimport { Connectors } from \"web3-react\";\nconst { InjectedConnector } = Connectors;\nconst MetaMask = new InjectedConnector({ supportedNetworks: [4, 42] });\nconst connectors = { MetaMask };\n\nReactDOM.render(\n  <Web3Provider libraryName=\"ethers.js\" connectors={connectors}>\n    <App />\n  </Web3Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}