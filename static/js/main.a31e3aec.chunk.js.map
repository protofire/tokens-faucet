{"version":3,"sources":["constants.js","App.js","serviceWorker.js","index.js"],"names":["tokens","DAI","address","abi","defaultAmount","BAT","networks","name","supportedNetworks","Object","keys","map","Number","App","context","useWeb3Context","account","networkId","library","setFirstValidConnector","error","useState","token","setToken","amount","setAmount","mining","setMining","contract","setContract","useEffect","ethers","Contract","getSigner","code","className","networkName","getToken","a","qtyWei","BN","pow","mul","method","includes","mint","allocateTo","toString","tx","wait","value","onChange","e","target","type","onClick","disabled","toUpperCase","href","toLowerCase","Boolean","window","location","hostname","match","connectors","MetaMask","InjectedConnector","Connectors","ReactDOM","render","libraryName","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a31e3aec.chunk.js","sourcesContent":["export const tokens = {\n  DAI: {\n    \"4\": {\n      address: \"0x5592ec0cfb4dbc12d3ab100b257153436a1f0fea\",\n      abi: [\"function allocateTo(address to, uint amount)\"],\n      defaultAmount: 100\n    },\n    \"42\": {\n      address: \"0x29200B8486Ec4f3A13E11f03FB0017C15a99C435\",\n      abi: [\"function mint(address to, uint amount)\"],\n      defaultAmount: 5\n    }\n  },\n  BAT: {\n    \"4\": {\n      address: \"0xbF7A7169562078c96f0eC1A8aFD6aE50f12e5A99\",\n      abi: [\"function allocateTo(address to, uint amount)\"],\n      defaultAmount: 100\n    },\n    \"42\": {\n      address: \"0x9dDB308C14f700d397bB26F584Ac2E303cdc7365\",\n      abi: [\"function allocateTo(address to, uint amount)\"],\n      defaultAmount: 100\n    }\n  }\n};\n\nexport const networks = {\n  \"4\": {\n    name: \"Rinkeby\"\n  },\n  \"42\": {\n    name: \"Kovan\"\n  }\n};\n\nexport const supportedNetworks = Object.keys(networks).map(Number);\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { useWeb3Context } from \"web3-react\";\nimport BN from \"big.js\";\nimport { ethers } from \"ethers\";\nimport { tokens, networks } from \"./constants\";\n\nfunction App() {\n  const context = useWeb3Context();\n  const {\n    account,\n    networkId,\n    library,\n    setFirstValidConnector,\n    error\n  } = context;\n\n  const [token, setToken] = useState(\"DAI\");\n  const [amount, setAmount] = useState(0);\n  const [mining, setMining] = useState(false);\n  const [contract, setContract] = useState(null);\n\n  useEffect(() => {\n    setFirstValidConnector([\"MetaMask\"]);\n  }, []);\n\n  useEffect(() => {\n    if (account && library) {\n      const { address, abi } = tokens[token][networkId];\n      setContract(new ethers.Contract(address, abi, library.getSigner()));\n    }\n  }, [account, library, networkId, token]);\n\n  useEffect(() => {\n    if (networkId) {\n      setAmount(tokens[token][networkId].defaultAmount);\n    }\n  }, [networkId, token]);\n\n  if (\n    error &&\n    (error.code === \"UNSUPPORTED_NETWORK\" ||\n      error.code === \"ALL_CONNECTORS_INVALID\")\n  ) {\n    return <div className=\"App\">Connect MetaMask to Rinkeby</div>;\n  }\n\n  if (!networkId) {\n    return null;\n  }\n\n  const networkName = networks[networkId].name;\n\n  const getToken = async () => {\n    const qtyWei = new BN(10).pow(18).mul(amount);\n    const method = tokens[token][networkId].abi[0].includes(\"mint\")\n      ? contract.mint\n      : contract.allocateTo;\n    const tx = await method(account, qtyWei.toString());\n    setMining(true);\n    await tx.wait();\n    setMining(false);\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <p>Account: {account || \"None\"}</p>\n        <p>Network: {networkName} </p>\n        <div>\n          <input\n            value={amount}\n            onChange={e => {\n              setAmount(e.target.value);\n            }}\n            type=\"number\"\n          ></input>\n          <select\n            onChange={e => {\n              setToken(e.target.value);\n            }}\n            value={token}\n          >\n            <option value=\"DAI\">DAI</option>\n            <option value=\"BAT\">BAT</option>\n          </select>\n        </div>\n\n        <button onClick={getToken} disabled={!amount || mining}>\n          {`GET ${amount} ${token.toUpperCase()}`}{\" \"}\n        </button>\n        <div>\n          <a\n            target=\"_blank\"\n            href={`https://${networkName.toLowerCase()}.etherscan.io/address/${\n              tokens[token][networkId].address\n            }`}\n          >\n            {tokens[token][networkId].address}\n          </a>\n        </div>\n      </div>\n      <footer>\n        <a href=\"https://github.com/protofire/tokens-faucet\">Source</a>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Web3Provider from \"web3-react\";\nimport { supportedNetworks } from \"./constants\";\nimport { Connectors } from \"web3-react\";\nconst { InjectedConnector } = Connectors;\nconst MetaMask = new InjectedConnector({ supportedNetworks });\nconst connectors = { MetaMask };\n\nReactDOM.render(\n  <Web3Provider libraryName=\"ethers.js\" connectors={connectors}>\n    <App />\n  </Web3Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}